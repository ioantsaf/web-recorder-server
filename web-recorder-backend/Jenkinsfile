#!groovy

node {
    stage('Preparation') {
        deleteDir()
        checkout scm
        sh 'git submodule update --init --recursive'
        env.GIT_URL = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim()
        env.GIT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
        env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        def workspace = pwd()
        sh "cp /var/jenkins_home/deploy-app-vars.yml ${workspace}/web-recorder-backend/ansible/"
        sh "cp /var/jenkins_home/ansible-hosts ${workspace}/web-recorder-backend/ansible/hosts"
        dir ('web-recorder-backend') {
            withEnv(['NODE_ENV=development']) {
                nodejs(nodeJSInstallationName: 'recent node') {
                    sh 'npm install'
                }
            }
        }
    }

    dir ('web-recorder-backend') {
        stage('SonarQube analysis') {
            // The SonarQube server requires at least 2GB of RAM to run efficiently and 1GB of free RAM for the OS.
            def scannerHome = tool 'sonar scanner';
            withSonarQubeEnv('sonar server') {
                sh "${scannerHome}/bin/sonar-scanner -Dproject.settings=sonar-project.properties"
            }
        }

        stage("SonarQube Quality Gate") {
            timeout(time: 1, unit: 'HOURS') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }
    

        stage('Staging deploy') {
            ansiColor('xterm') {
                ansiblePlaybook(
                    colorized: true,
                    inventory: 'ansible/hosts',
                    playbook: 'ansible/deploy-app-staging.yml',
                    sudoUser: null,
                    extraVars: [
                        "app_subdir":"web-recorder-backend",
                        "MAILGUN_API_KEY":"1234",
                        "MAILGUN_DOMAIN":"1234",
                        "JWT_SECRET_KEY":"1234"
                    ]
                )
            }
        }
    }
}

stage('Production deploy approval') {
    timeout(time: 5, unit: 'DAYS') {
        def deploy = input(id: 'userInput', message: 'Deploy to production?')
    }
}

node {
    dir ('web-recorder-backend') {
        stage('Production deploy') {
            ansiColor('xterm') {
                ansiblePlaybook(
                    colorized: true,
                    inventory: 'ansible/hosts',
                    playbook: 'ansible/deploy-app-production.yml',
                    sudoUser: null,
                    extraVars: [
                        "app_subdir":"web-recorder-backend",
                        "MAILGUN_API_KEY":"1234",
                        "MAILGUN_DOMAIN":"1234",
                        "JWT_SECRET_KEY":"1234"
                    ]
                )
            }
        }
    }
}
